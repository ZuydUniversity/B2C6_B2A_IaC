---
- name: Export and import MySQL Docker container to new Azure VM
  hosts: database
  vars:
    container_id: "{{ secrets.CONTAINER_ID_COPY  }}"  # ID van de huidige MySQL Docker-container
    vm_name: "DB-backup7"
    resource_group: "B2C6A"
    admin_username: "{{ secrets.ADMIN_USERNAME_AZ  }}"
    tenant_id: "{{ secrets.TENANT_ID }}"
    client_id: "{{ secrets.CLIENT_ID }}"
    client_secret: "{{ secrets.CLIENT_SECRET }}"
    root_password: "{{ secrets.DB_PASSWORD }}"  # Voeg dit toe om de root gebruiker in te stellen

  tasks:
    - name: Stop MySQL Docker container on original VM
      shell: docker stop {{ container_id }}
      become: yes
      ignore_errors: yes  # Negeer fouten als de container al is gestopt

    - name: Export MySQL Docker container as a tarball
      shell: docker export {{ container_id }} > /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar
      become: yes
      args:
        creates: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar  # Controleer of het bestand al bestaat

    - name: Copy tarball to new VM
      ansible.builtin.copy:
        src: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar
        dest: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar
        remote_src: yes

    - name: Log in to Azure
      shell: az login --service-principal -u {{ client_id }} -p {{ client_secret }} --tenant {{ tenant_id }}
      register: login_output

    - name: Create the VM
      shell: >
        az vm create --resource-group {{ resource_group }} --name {{ vm_name }}
        --image "Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
        --admin-username {{ admin_username }} --assign-identity --generate-ssh-keys
        --public-ip-sku Standard --location westeurope --size Standard_B1s
        --storage-sku Standard_LRS --nic-delete-option delete --os-disk-delete-option delete
      when: login_output is succeeded
      register: vm_info

    - name: Open port 3306 on the new VM for all traffic
      shell: >
        az vm open-port --resource-group {{ resource_group }} --name {{ vm_name }} --port 3306 --priority 1100
      when: vm_info is succeeded

    - name: Open port 3307 on the new VM for all traffic
      shell: >
        az vm open-port --resource-group {{ resource_group }} --name {{ vm_name }} --port 3307 --priority 1300
      when: vm_info is succeeded


    - name: Install Docker on new VM
      shell: |
        az vm run-command invoke --command-id RunShellScript --name {{ vm_name }} --resource-group {{ resource_group }} --scripts "sudo apt-get update && sudo apt-get install -y docker.io"
      when: vm_info is succeeded

    - name: Import MySQL Docker container on new VM
      shell: |
        sudo docker import /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar mysql_backup:latest
      args:
        chdir: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/
      when: vm_info is succeeded

    - name: Start MySQL Docker container on new VM
      shell: |
        sudo docker run --name mysql -e MYSQL_ROOT_PASSWORD={{ root_password }} -d mysql_backup mysqld --default-authentication-plugin=mysql_native_password
      when: vm_info is succeeded

    - name: Create MySQL database user on new VM
      shell: |
        sudo docker exec -i mysql mysql -uroot -p{{ root_password }} -e \
          "CREATE USER IF NOT EXISTS '{{ database_user }}'@'%' IDENTIFIED BY '{{ database_password }}';
          GRANT ALL PRIVILEGES ON *.* TO '{{ database_user }}'@'%';
          FLUSH PRIVILEGES;"
      when: vm_info is succeeded
