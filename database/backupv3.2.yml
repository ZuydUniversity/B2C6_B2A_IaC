---
- hosts: database
  vars:
    database_name: "{{ secrets.DB_NAME }}"
    database_user: "{{ secrets.DB_ADMIN }}"
    database_password: "{{ secrets.DB_PASSWORD }}"
    backup_dir: "/home/{{ secrets.ADMIN_USERNAME_AZ  }}/backups"
    container_id: "{{ secrets.DB_CONTAINER_ID }}"
  tasks:
    - name: Create backup directory on database VM
      file:
        path: "{{ backup_dir }}"
        state: directory
      become: yes

    - name: Set timestamp variable
      set_fact:
        timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

    - name: Take MySQL database backup
      command: docker exec {{ container_id }} sh -c "mysqldump -u{{ database_user }} -p{{ database_password }} {{ database_name }} > /tmp/db_backup_{{ timestamp }}.sql"
      become: yes

    - name: Copy backup file from container to host
      command: docker cp {{ container_id }}:/tmp/db_backup_{{ timestamp }}.sql {{ backup_dir }}/db_backup_{{ timestamp }}.sql
      become: yes

    - name: Remove temporary backup file from container
      command: docker exec {{ container_id }} rm /tmp/db_backup_{{ timestamp }}.sql
      become: yes

    - name: Fetch backup file to control machine
      fetch:
        src: "{{ backup_dir }}/db_backup_{{ timestamp }}.sql"
        dest: "./db_backup_{{ timestamp }}.sql"
      become: yes

- hosts: dbbackup
  vars:
    backup_dir: "/home/{{ secrets.ADMIN_USERNAME_AZ  }}/backups"
  tasks:
    - name: Create backup directory on DBBackup VM
      file:
        path: "{{ backup_dir }}"
        state: directory
      become: yes

    - name: Copy backup file to DBBackup VM
      copy:
        src: "./db_backup_{{ hostvars['database']['timestamp'] }}.sql"
        dest: "{{ backup_dir }}/db_backup_{{ hostvars['database']['timestamp'] }}.sql"
      become: yes
