---
- name: Export and import MySQL Docker container to new Azure VM
  hosts: database  # Verbinding wordt gelegd met localhost voor het uitvoeren van taken
  vars:
    container_id: "{{ secrets.CONTAINER_ID_COPY  }}"  # ID van de huidige MySQL Docker-container
    vm_name: "DB-backup26"
    resource_group: "B2C6A"
    admin_username: "{{ secrets.ADMIN_USERNAME_AZ  }}"
    tenant_id: "{{ secrets.TENANT_ID }}"
    client_id: "{{ secrets.CLIENT_ID }}"
    client_secret: "{{ secrets.CLIENT_SECRET }}"
    root_password: "{{ secrets.DB_PASSWORD }}"  # Voeg dit toe om de root gebruiker in te stellen
    database_user: "{{ secrets.DB_ADMIN }}"
    database_password: "{{ secrets.DB_PASSWORD }}"
    new_container_name: "mysql_newwwwwwwwwwwwwwww"  # Nieuwe container naam
    private_key_path: "{{ secrets.PRIVATE_KEY_PATH }}"  # Pad naar je private key

  tasks:
    - name: Stop MySQL Docker container on original VM
      shell: docker stop {{ container_id }}
      become: yes
      ignore_errors: yes  # Negeer fouten als de container al is gestopt

    - name: Export MySQL Docker container as a tarball
      shell: docker export {{ container_id }} > /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar
      become: yes
      args:
        creates: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar  # Controleer of het bestand al bestaat

    - name: Log in to Azure
      shell: az login --service-principal -u {{ client_id }} -p {{ client_secret }} --tenant {{ tenant_id }}
      register: login_output

    - name: Create the VM
      shell: >
        az vm create --resource-group {{ resource_group }} --name {{ vm_name }}
        --image "Canonical:0001-com-ubuntu-minimal-jammy:minimal-22_04-lts-gen2:latest"
        --admin-username {{ admin_username }} --assign-identity --generate-ssh-keys
        --public-ip-sku Standard --location westeurope --size Standard_B1s
        --storage-sku Standard_LRS --nic-delete-option delete --os-disk-delete-option delete
      when: login_output is succeeded
      register: vm_info

    - name: Get the public IP of the new VM
      shell: >
        az vm list-ip-addresses --resource-group {{ resource_group }} --name {{ vm_name }} --query "[0].virtualMachine.network.publicIpAddresses[0].ipAddress" --output tsv
      when: vm_info is succeeded
      register: vm_public_ip

    - name: Open port 3306 on the new VM for all traffic
      shell: >
        az vm open-port --resource-group {{ resource_group }} --name {{ vm_name }} --port 3306 --priority 1100
      when: vm_info is succeeded

    - name: Open port 3307 on the new VM for all traffic
      shell: >
        az vm open-port --resource-group {{ resource_group }} --name {{ vm_name }} --port 3307 --priority 1300
      when: vm_info is succeeded

    - name: Install Docker and rsync on new VM
      shell: |
        az vm run-command invoke --command-id RunShellScript --name {{ vm_name }} --resource-group {{ resource_group }} --scripts "sudo apt-get update && sudo apt-get install -y docker.io rsync"
      when: vm_info is succeeded

    - name: Copy tarball to new VM
      synchronize:
        src: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar
        dest: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar
      delegate_to: "{{ vm_public_ip.stdout }}"
      vars:
        ansible_ssh_private_key_file: "{{ private_key_path }}"

    - name: Import MySQL Docker container on new VM
      shell: |
        sudo docker import /home/{{ secrets.ADMIN_USERNAME_AZ  }}/mysql_container.tar mysql_backup:latest
      args:
        chdir: /home/{{ secrets.ADMIN_USERNAME_AZ  }}/
      delegate_to: "{{ vm_public_ip.stdout }}"
      vars:
        ansible_ssh_private_key_file: "{{ private_key_path }}"
      when: vm_info is succeeded

    - name: Start MySQL Docker container on new VM with a new name
      shell: |
        sudo docker run --name {{ new_container_name }} -e MYSQL_ROOT_PASSWORD={{ root_password }} -d mysql_backup mysqld --default-authentication-plugin=mysql_native_password
      delegate_to: "{{ vm_public_ip.stdout }}"
      vars:
        ansible_ssh_private_key_file: "{{ private_key_path }}"
      when: vm_info is succeeded

    - name: Wait for MySQL to be ready
      shell: |
        for i in {30..0}; do
          sudo docker exec {{ new_container_name }} mysqladmin ping -uroot -p{{ root_password }} && break
          echo 'MySQL init process in progress...'
          sleep 1
        done
      register: wait_for_mysql
      until: wait_for_mysql.rc == 0
      retries: 30
      delay: 10
      delegate_to: "{{ vm_public_ip.stdout }}"
      vars:
        ansible_ssh_private_key_file: "{{ private_key_path }}"
      when: vm_info is succeeded

    - name: Check MySQL Docker container logs
      shell: sudo docker logs {{ new_container_name }}
      register: docker_logs
      delegate_to: "{{ vm_public_ip.stdout }}"
      vars:
        ansible_ssh_private_key_file: "{{ private_key_path }}"
      when: vm_info is succeeded

    - debug:
        msg: "{{ docker_logs.stdout }}"
